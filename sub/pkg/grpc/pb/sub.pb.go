// Code generated by protoc-gen-go.
// source: sub.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	sub.proto

It has these top-level messages:
	SubRequest
	SubReply
*/
package pb

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type SubRequest struct {
	Left  float64 `protobuf:"fixed64,1,opt,name=left" json:"left,omitempty"`
	Right float64 `protobuf:"fixed64,2,opt,name=right" json:"right,omitempty"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}

type SubReply struct {
	Result float64 `protobuf:"fixed64,1,opt,name=result" json:"result,omitempty"`
}

func (m *SubReply) Reset()         { *m = SubReply{} }
func (m *SubReply) String() string { return proto.CompactTextString(m) }
func (*SubReply) ProtoMessage()    {}

func init() {
}

// Client API for Sub service

type SubClient interface {
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubReply, error)
}

type subClient struct {
	cc *grpc.ClientConn
}

func NewSubClient(cc *grpc.ClientConn) SubClient {
	return &subClient{cc}
}

func (c *subClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubReply, error) {
	out := new(SubReply)
	err := grpc.Invoke(ctx, "/pb.Sub/Sub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sub service

type SubServer interface {
	Sub(context.Context, *SubRequest) (*SubReply, error)
}

func RegisterSubServer(s *grpc.Server, srv SubServer) {
	s.RegisterService(&_Sub_serviceDesc, srv)
}

func _Sub_Sub_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SubRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(SubServer).Sub(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Sub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sub",
	HandlerType: (*SubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sub",
			Handler:    _Sub_Sub_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
