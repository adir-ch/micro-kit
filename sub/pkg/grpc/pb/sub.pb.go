// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sub.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubRequest struct {
	Left                 float64  `protobuf:"fixed64,1,opt,name=left,proto3" json:"left,omitempty"`
	Right                float64  `protobuf:"fixed64,2,opt,name=right,proto3" json:"right,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubRequest) Reset()         { *m = SubRequest{} }
func (m *SubRequest) String() string { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()    {}
func (*SubRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_168c8107357a6d2a, []int{0}
}

func (m *SubRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubRequest.Unmarshal(m, b)
}
func (m *SubRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubRequest.Marshal(b, m, deterministic)
}
func (m *SubRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubRequest.Merge(m, src)
}
func (m *SubRequest) XXX_Size() int {
	return xxx_messageInfo_SubRequest.Size(m)
}
func (m *SubRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubRequest proto.InternalMessageInfo

func (m *SubRequest) GetLeft() float64 {
	if m != nil {
		return m.Left
	}
	return 0
}

func (m *SubRequest) GetRight() float64 {
	if m != nil {
		return m.Right
	}
	return 0
}

type SubReply struct {
	Result               float64  `protobuf:"fixed64,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubReply) Reset()         { *m = SubReply{} }
func (m *SubReply) String() string { return proto.CompactTextString(m) }
func (*SubReply) ProtoMessage()    {}
func (*SubReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_168c8107357a6d2a, []int{1}
}

func (m *SubReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubReply.Unmarshal(m, b)
}
func (m *SubReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubReply.Marshal(b, m, deterministic)
}
func (m *SubReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubReply.Merge(m, src)
}
func (m *SubReply) XXX_Size() int {
	return xxx_messageInfo_SubReply.Size(m)
}
func (m *SubReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubReply proto.InternalMessageInfo

func (m *SubReply) GetResult() float64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SubRequest)(nil), "pb.SubRequest")
	proto.RegisterType((*SubReply)(nil), "pb.SubReply")
}

func init() { proto.RegisterFile("sub.proto", fileDescriptor_168c8107357a6d2a) }

var fileDescriptor_168c8107357a6d2a = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0x4d, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe3, 0xe2, 0x0a, 0x2e, 0x4d,
	0x0a, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x49, 0x4d, 0x2b, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0x60, 0x0c, 0x02, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0x8b, 0x32, 0xd3, 0x33,
	0x4a, 0x24, 0x98, 0xc0, 0x82, 0x10, 0x8e, 0x92, 0x12, 0x17, 0x07, 0x58, 0x5f, 0x41, 0x4e, 0xa5,
	0x90, 0x18, 0x17, 0x5b, 0x51, 0x6a, 0x71, 0x69, 0x0e, 0x4c, 0x1f, 0x94, 0x67, 0xa4, 0xc5, 0xc5,
	0x1c, 0x5c, 0x9a, 0x24, 0xa4, 0x0c, 0xa1, 0xf8, 0xf4, 0x0a, 0x92, 0xf4, 0x10, 0x76, 0x49, 0xf1,
	0xc0, 0xf9, 0x05, 0x39, 0x95, 0x49, 0x6c, 0x60, 0x27, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x22, 0x28, 0x12, 0x3f, 0x9f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubClient is the client API for Sub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubClient interface {
	Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubReply, error)
}

type subClient struct {
	cc *grpc.ClientConn
}

func NewSubClient(cc *grpc.ClientConn) SubClient {
	return &subClient{cc}
}

func (c *subClient) Sub(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*SubReply, error) {
	out := new(SubReply)
	err := c.cc.Invoke(ctx, "/pb.Sub/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubServer is the server API for Sub service.
type SubServer interface {
	Sub(context.Context, *SubRequest) (*SubReply, error)
}

func RegisterSubServer(s *grpc.Server, srv SubServer) {
	s.RegisterService(&_Sub_serviceDesc, srv)
}

func _Sub_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Sub/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServer).Sub(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sub",
	HandlerType: (*SubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sub",
			Handler:    _Sub_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sub.proto",
}
